package com.spring.ControllerTest;import com.spring.controller.ServiceInfoController;import com.spring.database.entity.ServiceInfo;import com.spring.repository.ServiceInfoRepository;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.mockito.InjectMocks;import org.mockito.Mock;import org.mockito.MockitoAnnotations;import org.mockito.runners.MockitoJUnitRunner;import org.springframework.http.MediaType;import org.springframework.test.web.servlet.MockMvc;import java.util.ArrayList;import java.util.List;import static org.assertj.core.api.AssertionsForClassTypes.assertThat;import static org.mockito.Matchers.any;import static org.mockito.Mockito.when;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.model;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;import static org.springframework.test.web.servlet.setup.MockMvcBuilders.standaloneSetup;/** * Created by Alia on 2017/5/10. */@RunWith(MockitoJUnitRunner.class)public class ServiceInfoControllerTest {    private MockMvc mockMvc;    @InjectMocks    private ServiceInfoController controller;    @Mock    private ServiceInfoRepository service;    @Before    public void setup() {        MockitoAnnotations.initMocks(this);        /**         * 当存在 "Circular view path" 异常时         * 解决办法一： 消除缺省转发         InternalResourceViewResolver resolver = new InternalResourceViewResolver(); //在test中重新配置视图解析器         resolver.setPrefix("/WEB_INF/views");         resolver.setSuffix(".jsp");         this.mockMvc = standaloneSetup(controller).setViewResolvers(resolver).build();         解决办法二： 修改view和path，让他们不同名         此处，将"/serviceInfo" 对应的view改为"serviceInfoPage"         */        this.mockMvc = standaloneSetup(controller).build();    }    @Test    public void contextLoads() {        assertThat(controller).isNotNull();    }    @Test    public void doGetTest() throws Exception {        List<ServiceInfo> sList = new ArrayList<>();        sList.add(new ServiceInfo(1,"alia.mock.1", "1.0.0", 200));        sList.add(new ServiceInfo(2,"alia.mock.2", "1.0.0", 200));        sList.add(new ServiceInfo(3,"alia.mock.3", "1.0.0", 200));        when(service.getAllServiceInfo()).thenReturn(sList);        mockMvc.perform(get("/serviceInfo").contentType(MediaType.APPLICATION_FORM_URLENCODED))                .andDo(print())                .andExpect(view().name("serviceInfoPage"))                .andExpect(model().attributeExists("serviceInfoList"));    }    @Test    public void doGetWithIdTest() throws Exception {        when(service.getServiceInfo(1)).thenReturn(new ServiceInfo(1,"alia.mock", "1.0.0", 200));        mockMvc.perform(get("/serviceInfo/getWithId")                .contentType(MediaType.APPLICATION_FORM_URLENCODED)//数据的格式                .requestAttr("id", "1"))                .andDo(print())        ;    }    @Test    public void doGetWithEntity() throws Exception {        ServiceInfo s = new ServiceInfo("alia.mock", "1.0.0", 200);        when(service.getServiceInfo(s)).thenReturn(new ServiceInfo(10, "alia.mock", "1.0.0", 200));        mockMvc.perform(get("/serviceInfo/getWithEntity")                .contentType(MediaType.APPLICATION_FORM_URLENCODED)//数据的格式                .requestAttr("s", s))//                .andDo(print())        ;    }    @Test    public void doDelWithIdTest() throws Exception {        when(service.deleteServiceInfo(16)).thenReturn(1);        mockMvc.perform(post("/serviceInfo/deleteWithId")                .contentType(MediaType.APPLICATION_FORM_URLENCODED)//数据的格式                .requestAttr("id", "16"))                .andDo(print())        ;    }    @Test    public void doDelWithEntity() throws Exception {        ServiceInfo s = new ServiceInfo("alia.mock", "1.0.0", 200);        when(service.deleteServiceInfo(s)).thenReturn(1);        mockMvc.perform(post("/serviceInfo/deleteWithEntity")                .contentType(MediaType.APPLICATION_FORM_URLENCODED)//数据的格式                .requestAttr("s", s))                .andDo(print())        ;    }}